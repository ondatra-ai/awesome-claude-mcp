story:
  id: "3.1"
  title: "MCP Server Implementation"
  as_a: "Developer/Maintainer"
  i_want: "to implement MCP protocol server"
  so_that: "Claude can communicate with the service"
  status: "PLANNED"
  acceptance_criteria:
    - id: AC-1
      description: "WebSocket server implemented"
    - id: AC-2
      description: "HTTP endpoint for MCP available"
    - id: AC-3
      description: "Message parsing and validation"
    - id: AC-4
      description: "Response formatting to MCP standard"
    - id: AC-5
      description: "Connection management handled"
    - id: AC-6
      description: "Concurrent connection support"

tasks:
  - name: "Set up Go module and project structure for MCP service"
    acceptance_criteria:
      - "AC-5"
      - "AC-6"
    subtasks:
      - "Initialize Go module for MCP service at services/mcp-service/"
      - "Create cmd/main.go entry point following Mark3Labs MCP-Go library patterns"
      - "Set up internal package structure: server/, operations/, docs/, auth/, cache/, config/"
      - "Add Mark3Labs MCP-Go dependency to go.mod"
      - "Create Dockerfile with multi-stage build for Railway deployment"
      - "Configure environment variables for MCP service (.env file)"
    status: "pending"

  - name: "Implement WebSocket server with MCP protocol handling"
    acceptance_criteria:
      - "AC-1"
      - "AC-3"
    subtasks:
      - "Set up Mark3Labs MCP server configuration in internal/server/mcp.go"
      - "Implement WebSocket endpoint upgrade handler for /mcp path"
      - "Configure MCP capabilities and server metadata according to protocol"
      - "Add connection management for concurrent WebSocket connections"
      - "Implement MCP message parsing and validation using Mark3Labs types"
      - "Add structured logging for all MCP protocol interactions"
      - "Create middleware for recovery and error handling"
    status: "pending"

  - name: "Create HTTP endpoint for MCP service availability"
    acceptance_criteria:
      - "AC-2"
    subtasks:
      - "Implement /health endpoint for service health checks"
      - "Add /version endpoint exposing MCP service version"
      - "Configure HTTP server alongside WebSocket server"
      - "Add CORS middleware for cross-origin requests"
      - "Implement graceful shutdown handling for both HTTP and WebSocket"
    status: "pending"

  - name: "Register MCP tools for Google Docs operations"
    acceptance_criteria:
      - "AC-3"
      - "AC-4"
    subtasks:
      - "Define tool schemas for all six document operations (replace_all, append, prepend, replace_match, insert_before, insert_after)"
      - "Implement tool registration with Mark3Labs MCP library in internal/server/tools.go"
      - "Create strongly-typed tool handlers in internal/server/handlers.go"
      - "Add parameter validation using enum/pattern support for operation types"
      - "Implement MCP result type wrappers in pkg/types/results.go"
      - "Add tool capability advertisement to MCP server initialization"
    status: "pending"

  - name: "Implement document operation processors"
    acceptance_criteria:
      - "AC-3"
      - "AC-4"
    subtasks:
      - "Create operation processor with parameter validation in internal/operations/processor.go"
      - "Implement replace operations with MCP result types in internal/operations/replace.go"
      - "Implement append operations with MCP result types in internal/operations/append.go"
      - "Implement insert operations with MCP result types in internal/operations/insert.go"
      - "Add parameter validation with enum/pattern support in internal/operations/validator.go"
      - "Integrate with Google Docs service client"
      - "Add operation result formatting according to MCP standards"
    status: "pending"

  - name: "Integrate Google Docs API client"
    acceptance_criteria:
      - "AC-3"
      - "AC-4"
    subtasks:
      - "Set up Google Docs client in internal/docs/client.go"
      - "Implement document service in internal/docs/service.go"
      - "Create Markdown converter in internal/docs/converter.go"
      - "Add Google Docs formatter in internal/docs/formatter.go"
      - "Configure OAuth for service accounts in internal/auth/oauth.go"
      - "Implement token validation with backend service in internal/auth/tokens.go"
      - "Add circuit breaker pattern for Google API calls"
    status: "pending"

  - name: "Implement connection and session management"
    acceptance_criteria:
      - "AC-5"
      - "AC-6"
    subtasks:
      - "Create connection pool for managing active WebSocket connections"
      - "Implement session tracking with user identification"
      - "Add connection timeout and heartbeat mechanisms"
      - "Create graceful connection cleanup on disconnect"
      - "Implement connection limits and rate limiting per user"
      - "Add metrics collection for connection statistics"
      - "Create connection recovery mechanisms for client reconnection"
    status: "pending"

  - name: "Add caching layer integration"
    acceptance_criteria:
      - "AC-5"
      - "AC-6"
    subtasks:
      - "Set up Redis client configuration in internal/cache/redis.go"
      - "Implement token caching for OAuth credentials"
      - "Add document metadata caching with TTL"
      - "Create operation status caching for real-time updates"
      - "Implement cache invalidation strategies"
      - "Add fallback mechanisms when cache is unavailable"
    status: "pending"

  - name: "Configure MCP service for Railway deployment"
    acceptance_criteria:
      - "AC-1"
      - "AC-2"
    subtasks:
      - "Update railway.toml with mcp-service definitions for all environments"
      - "Configure environment-specific variables in Railway dashboard"
      - "Set up custom domains for MCP service (mcp.dev.ondatra-ai.xyz, etc.)"
      - "Add health check endpoints for Railway monitoring"
      - "Configure service networking for backend communication"
      - "Test deployment pipeline with GitHub Actions integration"
    status: "pending"

  - name: "Implement comprehensive error handling and logging"
    acceptance_criteria:
      - "AC-3"
      - "AC-4"
    subtasks:
      - "Create custom error types in pkg/errors/errors.go"
      - "Implement structured logging with zerolog throughout MCP service"
      - "Add error context preservation and wrapping"
      - "Create user-friendly error messages for MCP responses"
      - "Implement error recovery mechanisms for Google API failures"
      - "Add correlation IDs for request tracing across services"
    status: "pending"

  - name: "Create unit tests for MCP service components"
    acceptance_criteria:
      - "AC-1"
      - "AC-2"
      - "AC-3"
      - "AC-4"
      - "AC-5"
      - "AC-6"
    subtasks:
      - "Write unit tests for MCP protocol handler with scenario ID UT_00011_01"
      - "Create unit tests for tool registration and validation with scenario ID UT_00011_02"
      - "Test document operation processors with mocked Google Docs API with scenario ID UT_00011_03"
      - "Add unit tests for connection management with scenario ID UT_00011_04"
      - "Test error handling and recovery mechanisms with scenario ID UT_00011_05"
      - "Create unit tests for caching integration with scenario ID UT_00011_06"
      - "Achieve 85% test coverage for business logic components"
    status: "pending"

  - name: "Create integration tests for end-to-end MCP workflows"
    acceptance_criteria:
      - "AC-1"
      - "AC-2"
      - "AC-3"
      - "AC-4"
      - "AC-5"
      - "AC-6"
    subtasks:
      - "Set up integration test environment with test Google Docs account"
      - "Create integration tests for complete document operation workflows with scenario ID IT_00011_01"
      - "Test MCP client-server communication with mock Claude client with scenario ID IT_00011_02"
      - "Validate OAuth token flow integration with backend service with scenario ID IT_00011_03"
      - "Test concurrent connection handling and performance with scenario ID IT_00011_04"
      - "Create integration tests for Railway deployment environment with scenario ID IT_00011_05"
      - "Validate error handling across service boundaries with scenario ID IT_00011_06"
    status: "pending"

dev_notes:
  architecture:
      component: MCP Service
      dependencies:
          - OAuth Manager for token validation
          - Document Service for Google Docs operations
          - Cache Manager for Redis operations
          - Circuit Breaker for Google API resilience
      description: 'From the MCP protocol workflow diagram:'
      responsibilities:
          - Handle MCP protocol communication with Claude AI
          - WebSocket endpoint for bidirectional communication
          - Tool registration and discovery
          - Request/response message handling
          - Connection management for concurrent sessions
          - Integration with OAuth Manager and Document Service
      source: ../../docs/architecture.md#Backend Components
      tech_stack:
          - Mark3Labs MCP-Go library
          - WebSocket server implementation
          - Structured JSON logging
          - Environment-based configuration
  configuration:
      description: 'Required environment variables for the MCP service:'
      environment_variables:
          BACKEND_API_URL: http://localhost:8080
          ENVIRONMENT: development
          GOOGLE_CLIENT_ID: OAuth client ID for Google services
          GOOGLE_CLIENT_SECRET: OAuth client secret
          LOG_FORMAT: json
          LOG_LEVEL: info
          MCP_SERVER_NAME: mcp-google-docs-editor
          MCP_SERVER_VERSION: 1.0.0
          PORT: "8081"
          REDIS_TTL_HOURS: "24"
          REDIS_URL: redis://localhost:6379
      source: ../../docs/architecture/coding-standards.md#Environment Variables
  deployment_considerations:
      custom_domains:
          development: mcp.dev.ondatra-ai.xyz
          production: mcp.ondatra-ai.xyz (planned)
          staging: mcp.staging.ondatra-ai.xyz (planned)
      description: 'Railway deployment requirements for MCP service:'
      dockerfile_requirements:
          - Multi-stage build for optimized container size
          - Go 1.21-alpine base image
          - Non-root user for security
          - Health check endpoint configuration
      environment_management:
          - Railway environment variables per service
          - Secret management for OAuth credentials
          - Service networking for backend communication
      monitoring:
          - Structured JSON logs to stdout
          - Health check endpoints for Railway monitoring
          - Correlation IDs for request tracing
      railway_services:
          development: mcp-service-dev
          production: mcp-service
          staging: mcp-service-staging
      source: ../../docs/architecture/source-tree.md#Deployment Configuration
  file_structure:
      description: 'Based on the project file structure:'
      files:
          - description: MCP server entry point with Mark3Labs library integration
            file: services/mcp-service/cmd/main.go
          - description: Mark3Labs MCP server setup and configuration
            file: services/mcp-service/internal/server/mcp.go
          - description: Tool registration with schema validation
            file: services/mcp-service/internal/server/tools.go
          - description: Strongly-typed tool handlers for document operations
            file: services/mcp-service/internal/server/handlers.go
          - description: Recovery and capability middleware
            file: services/mcp-service/internal/server/middleware.go
          - description: Operation processor with parameter validation
            file: services/mcp-service/internal/operations/processor.go
          - description: Replace operations with MCP result types
            file: services/mcp-service/internal/operations/replace.go
          - description: Append operations with MCP result types
            file: services/mcp-service/internal/operations/append.go
          - description: Insert operations with MCP result types
            file: services/mcp-service/internal/operations/insert.go
          - description: Parameter validation with enum/pattern support
            file: services/mcp-service/internal/operations/validator.go
          - description: Tool parameter structures
            file: services/mcp-service/pkg/types/tools.go
          - description: MCP result type wrappers
            file: services/mcp-service/pkg/types/results.go
          - description: Go module with Mark3Labs MCP-Go dependency
            file: services/mcp-service/go.mod
          - description: MCP service container definition
            file: services/mcp-service/Dockerfile
      source: ../../docs/architecture/source-tree.md#Service Structure
  integration_points:
      backend_service:
          endpoint: http://localhost:8080
          methods: POST /api/auth/validate, GET /api/users/me
          purpose: User authentication and token validation
      circuit_breaker:
          google_api_failures: 5 consecutive failures trigger open state
          recovery_time: 30 seconds half-open state
          timeout: 10 seconds per request
      description: 'Integration requirements with other services:'
      google_docs_api:
          endpoint: https://docs.googleapis.com/v1
          methods: GET /documents/{id}, POST /documents/{id}:batchUpdate
          purpose: Document operations
      redis_cache:
          endpoint: redis://localhost:6379
          purpose: Token caching and session management
          ttl: 24 hours
      source: ../../docs/architecture.md#Components
  mcp_protocol_compliance:
      capabilities:
          - tools (document operations)
          - logging (structured output)
          - prompts (operation templates)
      description: 'MCP protocol requirements and standards:'
      error_handling: Fail-fast with immediate error responses
      logging_requirements: All operations logged with structured JSON
      protocol_version: "2024-11-05"
      source: ../../docs/architecture.md#External APIs
      tool_schemas:
          - 'replace_all: Replace entire document content'
          - 'append: Add content to end of document'
          - 'prepend: Add content to beginning of document'
          - 'replace_match: Replace specific text matches'
          - 'insert_before: Insert content before anchor text'
          - 'insert_after: Insert content after anchor text'
      transport: WebSocket with JSON-RPC 2.0 messages
  performance_requirements:
      concurrent_connections: 10+
      connection_establishment: < 1s
      description: 'Performance requirements based on coding standards:'
      error_response_time: < 50ms
      health_check_response: < 100ms
      memory_usage: < 128MB
      message_processing: < 100ms
      source: ../../docs/architecture/coding-standards.md#Performance Standards
      token_validation: < 500ms
      websocket_timeout: 30s
  previous_story_insights: Story 3.1 is a foundational infrastructure task implementing the MCP (Model Context Protocol) server that enables Claude to communicate with the Google Docs service. This story establishes the core protocol layer that all subsequent document operations will build upon. The acceptance criteria focus on WebSocket server implementation, HTTP endpoints, message parsing/validation, response formatting, and concurrent connection management. This is a pure infrastructure story that requires strict adherence to MCP protocol standards without custom extensions. The implementation must support the fail-fast philosophy with immediate error responses and structured logging throughout. The story is part of establishing the three-service architecture (frontend, backend, MCP service) with the MCP service handling all Claude AI communication.
  security_considerations:
      audit_logging: All operations logged with user context
      authentication: OAuth 2.0 token validation through backend service
      cors_policy: Restricted to Claude domains only
      description: 'Security requirements for MCP service:'
      error_sanitization: No sensitive data in error messages
      input_validation: All MCP requests validated against schemas
      rate_limiting: Connection limits per user via backend integration
      source: ../../docs/architecture/coding-standards.md#Security Standards
      tls_enforcement: WSS (WebSocket Secure) required in production
      token_storage: Encrypted tokens in Redis cache
  technology_stack:
      additional_libraries:
          - gorilla/websocket for WebSocket handling
          - goldmark for Markdown parsing
          - go-redis/redis for token caching
      config: viper for environment variable management
      description: 'From the backend technology stack documentation:'
      framework: Mark3Labs MCP-Go library for protocol compliance
      google_apis: google.golang.org/api/docs/v1 for document operations
      language: Go 1.21
      logging: zerolog for structured JSON logging
      mcp_integration: WebSocket transport with stdio protocol support
      oauth_integration: golang.org/x/oauth2 for Google OAuth flows
      source: ../../docs/architecture/tech-stack.md#Backend Stack
  testing_strategy:
      coverage_target: 85% for business logic components
      description: 'Testing approach for MCP service implementation:'
      integration_tests:
          - description: Complete document operation workflows
            scenario_id: IT_00011_01
          - description: MCP client-server communication with mock Claude client
            scenario_id: IT_00011_02
          - description: OAuth token flow integration with backend service
            scenario_id: IT_00011_03
          - description: Concurrent connection handling and performance
            scenario_id: IT_00011_04
          - description: Railway deployment environment testing
            scenario_id: IT_00011_05
          - description: Error handling across service boundaries
            scenario_id: IT_00011_06
      source: ../../docs/architecture/coding-standards.md#Test Strategy and Standards
      unit_tests:
          - description: MCP protocol handler with mock Claude client
            scenario_id: UT_00011_01
          - description: Tool registration and validation
            scenario_id: UT_00011_02
          - description: Document operation processors with mocked Google Docs API
            scenario_id: UT_00011_03
          - description: Connection management and concurrent sessions
            scenario_id: UT_00011_04
          - description: Error handling and recovery mechanisms
            scenario_id: UT_00011_05
          - description: Caching integration with Redis
            scenario_id: UT_00011_06


testing:
  test_location: "services/mcp-service"
  frameworks:
    - "Go testing package"
    - "testify"
    - "gomock"
    - "httptest"
  requirements:
    - "Unit tests for MCP protocol handlers"
    - "Unit tests for WebSocket connection management"
    - "Unit tests for message parsing and validation"
    - "Unit tests for response formatting"
    - "Integration tests for WebSocket server startup"
    - "Integration tests for MCP protocol compliance"
    - "Integration tests for concurrent connections"
    - "End-to-end tests for complete MCP workflow"
  coverage:
    business_logic: "85%"
    critical_paths: "100%"
    overall: "80%"

change_log:
  - date: "2025-09-28"
    version: "1.0.0"
    description: "Initial story creation"
    author: "bmad-cli"

qa_results:
  review_date: "2025-09-28"
  reviewed_by: "Quinn (Test Architect)"

  assessment:
    summary: "Well-structured MCP server implementation story with comprehensive technical details, clear acceptance criteria, and thorough development notes. Strong foundation for protocol compliance implementation."

    strengths:
      - "Clear separation of concerns with 6 focused acceptance criteria covering WebSocket, HTTP, parsing, formatting, and connection management"
      - "Comprehensive task breakdown with 12 detailed tasks covering full implementation lifecycle from setup to testing"
      - "Excellent technical documentation including architecture, security, performance requirements, and integration points"
      - "Strong testing strategy with both unit tests (6 scenarios) and integration tests (6 scenarios) achieving 85% coverage target"
      - "Well-defined technology stack using Mark3Labs MCP-Go library ensuring protocol compliance"
      - "Clear deployment strategy with Railway configuration and environment management"
      - "Proper security considerations including OAuth validation, rate limiting, and audit logging"
      - "Performance requirements clearly specified with concrete metrics and timeouts"

    improvements:
      - "Add explicit validation criteria for MCP protocol version compatibility (currently mentions 2024-11-05 but no validation acceptance criteria)"
      - "Include specific error handling test scenarios in acceptance criteria beyond general 'message parsing and validation'"
      - "Add acceptance criteria for monitoring and observability requirements mentioned in development notes"
      - "Consider adding acceptance criteria for graceful degradation when dependent services (Redis, Google Docs API) are unavailable"

    risk_level: "Medium"
    risk_reason: "Multiple external integrations (MCP protocol, Google Docs API, OAuth, Redis) create dependency complexity. WebSocket connection management at scale requires careful implementation. Protocol compliance testing needs thorough validation."
    testability_score: 9
    testability_max: 10
    testability_notes: "Excellent testability with comprehensive unit and integration test scenarios. Clear mocking strategies for external dependencies. Well-defined test scenarios with IDs. Minor improvement needed for protocol compliance validation testing."
    implementation_readiness: 8
    implementation_readiness_max: 10

  gate_status: "PASS"
  gate_reference: "docs/qa/gates/3.1-mcp-server-implementation.yml"

dev_agent_record:
  agent_model_used: null
  debug_log_references: []
  completion_notes: []
  file_list: []
