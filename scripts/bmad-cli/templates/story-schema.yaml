# Yamale schema for story template validation
# Validates story templates like 3.1.mcp-server-implementation.yml

story:
  id: str()
  title: str()
  as_a: str()
  i_want: str()
  so_that: str()
  status: enum('COMPLETE', 'PLANNED', 'IN_PROGRESS', 'BLOCKED', 'CANCELLED', 'DRAFT')
  acceptance_criteria: list(include('acceptance_criteria'), min=1)
  notes: str(required=False)

tasks: list(include('task'), min=1)

dev_notes:
  previous_story_insights: str(required=False)
  technology_stack: include('dev_note_entity')
  architecture: include('dev_note_entity')
  file_structure: include('dev_note_entity')
  configuration: include('dev_note_entity', required=False)
  performance_requirements: include('dev_note_entity', required=False)
  logging_standards: include('dev_note_entity', required=False)
  error_handling_standards: include('dev_note_entity', required=False)
  testing_requirements: include('dev_note_entity', required=False)
  mcp_integration: include('dev_note_entity', required=False)
  connection_management: include('dev_note_entity', required=False)

configuration: include('config', required=False)
performance_requirements: map(str(), str(), required=False)

testing:
  test_location: str()
  frameworks: list(str(), min=1)
  requirements: list(str(), min=1)
  coverage: include('coverage')

scenarios:
  test_scenarios: list(include('test_scenario'), min=1)

change_log: list(include('change_entry'), required=False)
qa_results: include('qa_review', required=False)
dev_agent_record: include('agent_record', required=False)

---
# Include definitions

acceptance_criteria:
  id: regex('^AC-[0-9]+$')
  description: str()

task:
  name: str()
  acceptance_criteria: list(regex('^AC-[0-9]+$'), min=1)
  subtasks: list(str(), min=1)
  status: enum('pending', 'in_progress', 'complete', 'blocked')

dev_note_entity:
  source: str(required=True)
  description: str(required=True)
  # All other fields are flexible - any content allowed

config:
  environment_variables: map(str(), str(), required=False)
  secrets: list(str(), required=False)
  feature_flags: map(str(), bool(), required=False)

coverage:
  business_logic: regex(r'^\d+%$')
  overall: regex(r'^\d+%$')

test_scenario:
  id: regex(r'^\d+\.\d+-(INT|E2E)-\d+$')
  acceptance_criteria: list(regex('^AC-[0-9]+$'), min=1)
  given: str()
  when: str()
  then: str()
  level: enum('integration', 'e2e')
  priority: enum('P0', 'P1', 'P2', 'P3')
  mitigates_risks: list(str(), required=False)

change_entry:
  date: regex(r'^\d{4}-\d{2}-\d{2}$')
  version: regex(r'^\d+\.\d+(\.\d+)?$')
  description: str()
  author: str()

qa_review:
  review_date: regex(r'^\d{4}-\d{2}-\d{2}$')
  reviewed_by: str()
  assessment: include('assessment')
  gate_status: enum('PASS', 'CONCERNS', 'FAIL', 'WAIVED')
  gate_reference: regex(r'^docs/qa/gates/.*\.yml$')

assessment:
  summary: str()
  strengths: list(str(), required=False)
  improvements: list(str(), required=False)
  risk_level: enum('Low', 'Medium', 'High', 'Critical')
  risk_reason: str()
  testability_score: int(min=0, max=10)
  testability_max: int(min=10, max=10)
  testability_notes: str(required=False)
  implementation_readiness: int(min=0, max=10)
  implementation_readiness_max: int(min=10, max=10)

agent_record:
  agent_model_used: any(str(), null())
  debug_log_references: list(str())
  completion_notes: list(str())
  file_list: list(str())
