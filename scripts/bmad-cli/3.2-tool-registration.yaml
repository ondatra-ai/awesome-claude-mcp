story:
  id: "3.2"
  title: "Tool Registration"
  as_a: "Claude User"
  i_want: "to discover available tools"
  so_that: "I know what operations are available"
  status: "PLANNED"
  acceptance_criteria:
    - id: AC-1
      description: "Tool definition schema created"
    - id: AC-2
      description: "Tool registration endpoint working"
    - id: AC-3
      description: "Tool capabilities described clearly"
    - id: AC-4
      description: "Parameter schemas defined"
    - id: AC-5
      description: "Version information included"
    - id: AC-6
      description: "Dynamic or static registration (TBD after testing)"

tasks:
  - name: "Implement MCP tool schema definitions for document operations"
    acceptance_criteria:
      - "AC-1"
      - "AC-4"
    subtasks:
      - "Create pkg/types/tools.go with structured MCP tool definitions for all six operations"
      - "Define ToolDefinition struct with name, description, parameters, and schema validation"
      - "Implement ReplaceAllTool schema with documentId (string, required) and content (string, required) parameters"
      - "Create AppendTool and PrependTool schemas with documentId and content parameters"
      - "Define ReplaceMatchTool schema with documentId, content, anchor (string, required), and caseSensitive (boolean, optional) parameters"
      - "Implement InsertBeforeTool and InsertAfterTool schemas with documentId, content, and anchor parameters"
      - "Add JSON schema validation for Google Docs document ID format (44-character alphanumeric pattern)"
      - "Include content size validation (max 10MB) and Markdown format validation"
    status: "pending"

  - name: "Develop MCP tool registration and discovery endpoints"
    acceptance_criteria:
      - "AC-2"
      - "AC-6"
    subtasks:
      - "Implement MCP capability negotiation handshake in internal/server/tools.go"
      - "Create static tool registry initialization in server startup sequence"
      - "Implement tools/list endpoint returning all available document operation tools"
      - "Add tools/call endpoint for executing specific tool operations"
      - "Register six tools: docs_replace_all, docs_append, docs_prepend, docs_replace_match, docs_insert_before, docs_insert_after"
      - "Implement MCP JSON-RPC response formatting for tool discovery"
      - "Add error handling for unsupported or malformed tool requests"
      - "Include comprehensive logging for all tool registration and discovery events"
    status: "pending"

  - name: "Create comprehensive tool capability descriptions and documentation"
    acceptance_criteria:
      - "AC-3"
    subtasks:
      - "Document docs_replace_all: 'Replace entire document content with provided Markdown'"
      - "Document docs_append: 'Add content to the end of the document'"
      - "Document docs_prepend: 'Add content to the beginning of the document'"
      - "Document docs_replace_match: 'Replace specific text matching anchor with new content'"
      - "Document docs_insert_before: 'Insert content before text matching anchor'"
      - "Document docs_insert_after: 'Insert content after text matching anchor'"
      - "Include parameter descriptions with examples for each tool"
      - "Add usage examples showing typical Claude AI interaction patterns"
      - "Document error scenarios: document not found, permission denied, invalid anchor"
      - "Create help text explaining when to use each operation type"
    status: "pending"

  - name: "Implement parameter validation with MCP schema compliance"
    acceptance_criteria:
      - "AC-4"
    subtasks:
      - "Create internal/operations/validator.go with parameter validation logic"
      - "Implement validateDocumentId function checking Google Docs ID format"
      - "Add validateContent function for Markdown format and size limits (max 10MB)"
      - "Create validateAnchor function for positioned operations (non-empty string)"
      - "Implement validateCaseSensitive function for boolean parameter"
      - "Add comprehensive error messages with validation failure details"
      - "Create parameter sanitization to prevent injection attacks"
      - "Include parameter type coercion following MCP protocol standards"
    status: "pending"

  - name: "Add version information and metadata to tool registration"
    acceptance_criteria:
      - "AC-5"
    subtasks:
      - "Add VERSION constant in pkg/version/version.go with semantic versioning"
      - "Include version field in all tool definition responses"
      - "Implement version compatibility checking for MCP protocol"
      - "Add version information to /health and /version endpoints"
      - "Create tool metadata with version, author, and update timestamps"
      - "Include version in MCP server capability negotiation response"
      - "Document version update procedures and backward compatibility"
    status: "pending"

  - name: "Configure static tool registration for production deployment"
    acceptance_criteria:
      - "AC-6"
    subtasks:
      - "Implement static tool initialization in internal/server/mcp.go server startup"
      - "Create tool configuration with enable/disable flags per operation type"
      - "Pre-register all six document operations on MCP server initialization"
      - "Implement in-memory tool registry cache for fast discovery responses"
      - "Add configuration option ENABLE_TOOLS environment variable for selective tool activation"
      - "Create tool registry health check ensuring all tools are properly registered"
      - "Prepare infrastructure hooks for future dynamic tool registration upgrade"
    status: "pending"

  - name: "Implement comprehensive testing for tool registration and discovery"
    acceptance_criteria:
      - "AC-1"
      - "AC-2"
      - "AC-3"
      - "AC-4"
      - "AC-5"
    subtasks:
      - "Create unit tests for all tool schema definitions in pkg/types/tools_test.go"
      - "Implement integration tests for MCP tool discovery endpoint"
      - "Add tests for parameter validation with valid and invalid inputs"
      - "Create tests for tool registration startup sequence"
      - "Implement mock MCP client for testing tool discovery responses"
      - "Add performance tests for tool discovery response times (< 50ms)"
      - "Create end-to-end tests simulating Claude AI tool discovery workflow"
      - "Include tests for version compatibility and tool metadata validation"
    status: "pending"

dev_notes:
  previous_story_insights: "This is a new story without previous implementation insights"

  technology_stack:
    language: "Go"
    framework: "Standard library"
    mcp_integration: "MCP integration as needed"
    logging: "slog"
    config: "viper"

  architecture:
    component: "Tool Registration"
    responsibilities:
      - "Implement core functionality"
      - "Handle business logic"
    dependencies:
      - "context"
      - "fmt"
      - "log/slog"
    tech_stack:
      - "Go"
      - "YAML"
      - "HTTP"
      - "JSON"

  file_structure:
    files:
      - "services/backend/internal/story/implementation.go"

  configuration:
    environment_variables:
      LOG_LEVEL: "info"
      PORT: "8080"
      TEMPLATE_PATH: "templates/"

  performance_requirements:
    connection_establishment: "< 100ms"
    message_processing: "< 50ms"
    concurrent_connections: "100"
    memory_usage: "< 100MB"

testing:
  test_location: "services/backend/tests"
  frameworks:
    - "testing"
    - "testify"
  requirements:
    - "Unit tests for all public methods"
    - "Integration tests for external dependencies"
    - "End-to-end tests for complete workflows"
  coverage:
    business_logic: "80%"
    overall: "75%"

change_log:
  - date: "2025-09-26"
    version: "1.0.0"
    description: "Initial story creation"
    author: "bmad-cli"

dev_agent_record:
  agent_model_used: null
  debug_log_references: []
  completion_notes: []
  file_list: []
