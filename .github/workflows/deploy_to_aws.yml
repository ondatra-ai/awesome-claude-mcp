name: 'Deploy to AWS'

on:
  push:
    branches:
      - main
      - 'releases/**'
      - feature/aws-deployment-workflow

  workflow_dispatch:
    inputs:
      deploy-env:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev
      deploy-plan-only:
        description: 'Plan only (no apply)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: ${{ github.event.inputs.deploy-env || 'dev' }}

    env:
      TF_ENV: ${{ github.event.inputs.deploy-env || 'dev' }}
      AWS_REGION: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Check if S3 backend exists
        id: check_backend
        run: |
          if aws s3api head-bucket --bucket terraform-awesome-claude-mcp 2>/dev/null; then
            echo "backend_exists=true" >> $GITHUB_OUTPUT
          else
            echo "backend_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Bootstrap S3 backend
        if: steps.check_backend.outputs.backend_exists == 'false'
        run: make tf-bootstrap
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        run: make tf-init TF_ENV=${{ env.TF_ENV }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        run: make tf-validate TF_ENV=${{ env.TF_ENV }}

      - name: Terraform Plan
        run: make tf-plan TF_ENV=${{ env.TF_ENV }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload Terraform Plan
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.TF_ENV }}
          path: infrastructure/terraform/plan.out
          retention-days: 7

      - name: Terraform Apply Infrastructure
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        run: make tf-apply TF_ENV=${{ env.TF_ENV }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Terraform outputs
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        id: tf_outputs
        run: |
          cd infrastructure/terraform
          REGISTRY_ID=$(terraform output -raw ecr_registry_id)
          BACKEND_REPO=$(terraform output -raw backend_repository_url)
          FRONTEND_REPO=$(terraform output -raw frontend_repository_url)
          echo "registry_id=$REGISTRY_ID" >> $GITHUB_OUTPUT
          echo "backend_repo=$BACKEND_REPO" >> $GITHUB_OUTPUT
          echo "frontend_repo=$FRONTEND_REPO" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials for ECR
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        run: |
          cd services/backend
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)

          docker build -t backend-temp:${SHORT_SHA} .
          docker tag backend-temp:${SHORT_SHA} ${{ steps.tf_outputs.outputs.backend_repo }}:${SHORT_SHA}
          docker tag backend-temp:${SHORT_SHA} ${{ steps.tf_outputs.outputs.backend_repo }}:latest

          docker push ${{ steps.tf_outputs.outputs.backend_repo }}:${SHORT_SHA}
          docker push ${{ steps.tf_outputs.outputs.backend_repo }}:latest

          echo "backend_image_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "backend_image_uri=${{ steps.tf_outputs.outputs.backend_repo }}:${SHORT_SHA}" >> $GITHUB_OUTPUT
        id: backend_build

      - name: Build and push frontend image
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        run: |
          cd services/frontend
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)

          docker build -t frontend-temp:${SHORT_SHA} .
          docker tag frontend-temp:${SHORT_SHA} ${{ steps.tf_outputs.outputs.frontend_repo }}:${SHORT_SHA}
          docker tag frontend-temp:${SHORT_SHA} ${{ steps.tf_outputs.outputs.frontend_repo }}:latest

          docker push ${{ steps.tf_outputs.outputs.frontend_repo }}:${SHORT_SHA}
          docker push ${{ steps.tf_outputs.outputs.frontend_repo }}:latest

          echo "frontend_image_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "frontend_image_uri=${{ steps.tf_outputs.outputs.frontend_repo }}:${SHORT_SHA}" >> $GITHUB_OUTPUT
        id: frontend_build

      - name: Terraform Plan Services Update
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        run: make tf-plan TF_ENV=${{ env.TF_ENV }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_backend_image: ${{ steps.backend_build.outputs.backend_image_uri }}
          TF_VAR_frontend_image: ${{ steps.frontend_build.outputs.frontend_image_uri }}

      - name: Terraform Apply Services Update
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        run: make tf-apply TF_ENV=${{ env.TF_ENV }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_backend_image: ${{ steps.backend_build.outputs.backend_image_uri }}
          TF_VAR_frontend_image: ${{ steps.frontend_build.outputs.frontend_image_uri }}

      - name: Force ECS service update
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        run: |
          echo "ECS services will be automatically updated by Terraform Apply step"
          echo "Task definitions were updated with new image URIs"
          echo "Backend image: ${{ steps.backend_build.outputs.backend_image_uri }}"
          echo "Frontend image: ${{ steps.frontend_build.outputs.frontend_image_uri }}"

      - name: Post-deployment verification
        if: ${{ github.event.inputs.deploy-plan-only != 'true' }}
        run: |
          echo "Running post-deployment verification..."
          echo "Infrastructure deployment completed successfully"
          # Add health checks or smoke tests here

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.TF_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Plan Only**: ${{ github.event.inputs.deploy-plan-only || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: S3 (terraform-awesome-claude-mcp)" >> $GITHUB_STEP_SUMMARY
          echo "- **State Key**: ${{ env.TF_ENV }}/terraform.tfstate" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ steps.backend_build.outputs.backend_image_uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ steps.frontend_build.outputs.frontend_image_uri }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 ECR Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry ID**: \`${{ steps.tf_outputs.outputs.registry_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Repository**: \`${{ steps.tf_outputs.outputs.backend_repo }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Repository**: \`${{ steps.tf_outputs.outputs.frontend_repo }}\`" >> $GITHUB_STEP_SUMMARY
