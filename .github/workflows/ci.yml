name: Code Quality

on:
  pull_request:
    types: [synchronize, opened, reopened]
  push:
    branches:
      - main

# Set minimum permissions by default
permissions:
  contents: read

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: services/frontend/package-lock.json

      - name: Install dependencies
        run: make init

      - name: Run unit tests
        run: make test-unit

  lint:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: services/frontend/package-lock.json

      - name: Install dependencies
        run: make init

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run backend linting
        run: make lint-backend

      - name: Run frontend linting
        run: make lint-frontend

      - name: Run scripts linting
        run: make lint-scripts

  validate-requirements:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate requirements.yml with Yamale
        uses: nrkno/yaml-schema-validator-github-action@v5.1.0
        with:
          schema: docs/requirements-schema.yaml
          target: docs/requirements.yml

  e2e-tests:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: services/frontend/package-lock.json

      - name: Install dependencies
        run: make init

      - name: Run E2E tests
        run: make test-e2e

  # sonarqube:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.actor != 'dependabot[bot]' }}
  #   needs: unit-tests
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Download coverage report
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: ./
  #
  #     - name: SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@v5.0.0
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #
  #     - name: SonarQube Quality Gate check
  #       uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
  #       timeout-minutes: 5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   if: ${{ github.actor != 'dependabot[bot]' }}
  #   permissions:
  #     contents: read
  #     security-events: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.24.5'
  #         cache: true
  #
  #     - name: Run Gosec Security Scanner
  #       uses: securego/gosec@v2.22.7
  #       with:
  #         args: '-exclude=G304,G204 ./...'
  #
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@0.32.0
  #       with:
  #         scan-type: 'fs'
  #         scan-ref: '.'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #
  #     - name: Upload Trivy scan results
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
