story:
  id: "3.1"
  title: "MCP Server Implementation"
  as_a: "Developer/Maintainer"
  i_want: "to implement MCP protocol server"
  so_that: "Claude can communicate with the service"
  status: "PLANNED"
  acceptance_criteria:
    - id: AC-1
      description: "WebSocket server implemented"
    - id: AC-2
      description: "HTTP endpoint for MCP available"
    - id: AC-3
      description: "Message parsing and validation"
    - id: AC-4
      description: "Response formatting to MCP standard"
    - id: AC-5
      description: "Connection management handled"
    - id: AC-6
      description: "Concurrent connection support"

tasks:
  - name: "Initial WebSocket Server Setup"
    acceptance_criteria:
      - "AC-1"
    subtasks:
      - "Create WebSocket server using gorilla/websocket with base configuration"
      - "Implement WebSocket connection handler with upgrade logic"
      - "Add basic ping/pong health check mechanism"
      - "Add structured logging for connection lifecycle events"
      - "Write unit tests for WebSocket server initialization"
      - "Write integration tests for WebSocket connectivity"
    status: "pending"

  - name: "HTTP Endpoint Implementation"
    acceptance_criteria:
      - "AC-2"
    subtasks:
      - "Configure Fiber HTTP server for MCP endpoint"
      - "Implement route handler for /mcp HTTP upgrade requests"
      - "Add request validation and authorization middleware"
      - "Configure CORS and security headers"
      - "Add health check endpoint"
      - "Write unit tests for HTTP route handlers"
      - "Write integration tests for HTTP endpoints"
    status: "pending"

  - name: "Message Parser Implementation"
    acceptance_criteria:
      - "AC-3"
    subtasks:
      - "Create MCP message parser using Mark3Labs MCP-Go library"
      - "Implement validation for incoming message structure"
      - "Add schema validation for tool inputs"
      - "Create error type definitions for parsing failures"
      - "Implement parsing for all MCP message types"
      - "Write unit tests for message parsing"
      - "Write integration tests for message validation"
    status: "pending"

  - name: "Response Formatter Implementation"
    acceptance_criteria:
      - "AC-4"
    subtasks:
      - "Implement MCP response message formatter"
      - "Add response validation against MCP schema"
      - "Create structured error response formatting"
      - "Add type-safe response builders for different message types"
      - "Implement streaming response support"
      - "Write unit tests for response formatting"
      - "Write integration tests for response validation"
    status: "pending"

  - name: "Connection Management System"
    acceptance_criteria:
      - "AC-5"
    subtasks:
      - "Create connection manager with goroutines per connection"
      - "Implement graceful connection termination"
      - "Add timeout and keep-alive management"
      - "Implement error recovery and reconnection logic"
      - "Add connection state tracking and metrics"
      - "Write unit tests for connection management"
      - "Write integration tests for connection lifecycle"
    status: "pending"

  - name: "Concurrency Handler Implementation"
    acceptance_criteria:
      - "AC-6"
    subtasks:
      - "Implement connection pool with bounded concurrency"
      - "Add request rate limiting per connection"
      - "Implement connection backpressure mechanism"
      - "Create concurrent message processing queue"
      - "Add resource usage monitoring and limits"
      - "Write unit tests for concurrent operations"
      - "Write load tests for concurrent connections"
    status: "pending"

  - name: "End-to-End Testing Implementation"
    acceptance_criteria:
      - "AC-1"
      - "AC-2"
      - "AC-3"
      - "AC-4"
      - "AC-5"
      - "AC-6"
    subtasks:
      - "Set up E2E test environment with Docker Compose"
      - "Create MCP client test harness"
      - "Implement end-to-end message flow tests"
      - "Add load testing scenarios"
      - "Create failure and recovery test scenarios"
      - "Write performance test suite"
    status: "pending"

dev_notes:
  architecture:
      component: MCP Protocol Handler
      dependencies:
          - OAuth Manager for token validation
          - Command Processor for operation execution
          - Document Service for Google Docs integration
      description: 'From the MCP protocol workflow diagram:'
      responsibilities:
          - Handle WebSocket connections and lifecycle
          - Implement MCP protocol using Mark3Labs library
          - Route tool requests to appropriate handlers
          - Manage connection state and concurrency
          - Validate messages and enforce schema compliance
      source: ./docs/architecture.md#Backend Components
      tech_stack:
          - Go stdlib net/http
          - gorilla/websocket
          - Mark3Labs MCP-Go
          - zerolog
          - viper
  configuration:
      description: 'Required environment variables for the service:'
      environment_variables:
          ENVIRONMENT: development
          GOOGLE_CLIENT_ID: from_railway_config
          GOOGLE_CLIENT_SECRET: from_railway_config
          LOG_FORMAT: json
          LOG_LEVEL: info
          MCP_PORT: "8081"
          PORT: "8080"
          REDIS_TTL_HOURS: "24"
          REDIS_URL: redis://localhost:6379
      source: ./docs/architecture/coding-standards.md#Environment Variables
  file_structure:
      description: 'Based on the project file structure in services/backend:'
      files:
          - description: Entry point with HTTP and WebSocket server setup
            file: /services/backend/cmd/main.go
          - description: Mark3Labs MCP server configuration and setup
            file: /services/backend/internal/server/mcp.go
          - description: Tool registration with schema validation
            file: /services/backend/internal/server/tools.go
          - description: Tool handlers with strongly-typed responses
            file: /services/backend/internal/server/handlers.go
          - description: Recovery and capability middleware
            file: /services/backend/internal/server/middleware.go
          - description: Tool parameter structures and schema definitions
            file: /services/backend/pkg/types/tools.go
          - description: MCP result type wrappers
            file: /services/backend/pkg/types/results.go
      source: ./docs/architecture/source-tree.md#Services Directory
  performance_requirements:
      concurrent_connections: Support 10+ per instance
      concurrent_requests: 60 requests/minute per user
      connection_establishment: < 1000ms
      description: 'Performance requirements based on coding standards:'
      memory_usage: < 128MB per instance
      message_processing: < 2000ms (95th percentile)
      source: ./docs/architecture/coding-standards.md#Performance Standards
  previous_story_insights: |
      This is a foundational server implementation that will handle all MCP protocol communication. The key aspects are:
      - WebSocket server for real-time bidirectional communication
      - Protocol conformance with Mark3Labs MCP-Go library
      - Concurrent connection handling and proper connection lifecycle management
      - Structured error handling for clean error propagation
      - Integration with existing OAuth token management
  technology_stack:
      config: viper for environment/config management
      dependencies:
          - gorilla/websocket for WebSocket implementation
          - golang.org/x/oauth2 for token management
          - google.golang.org/api/docs/v1 for Google Docs API
      description: 'From the backend technology stack documentation:'
      framework: Fiber 2.x for HTTP routing and middleware
      language: Go 1.21 for high-performance network services
      logging: zerolog for structured JSON logging
      mcp_integration: Mark3Labs MCP-Go library for protocol implementation
      source: ./docs/architecture/tech-stack.md#Backend Stack (Go)


testing:
  test_location: "services/backend/internal/server"
  frameworks:
    - "Go test package"
    - "testify"
    - "httptest"
    - "websocket testing package"
    - "gomock"
    - "golangci-lint"
    - "Playwright (integration and e2e)"
  requirements:
    - "Unit test WebSocket server initialization logic (AC-1)"
    - "Unit test WebSocket connection handler with upgrade logic (AC-1)"
    - "Unit test connection validation and error handling (AC-1, AC-5)"
    - "Unit test ping/pong mechanism implementation (AC-1, AC-5)"
    - "Unit test token validation middleware (AC-1)"
    - "Unit test HTTP route handler for MCP endpoint (AC-2)"
    - "Unit test request validation middleware (AC-2, AC-3)"
    - "Unit test CORS and security headers configuration (AC-2)"
    - "Unit test MCP message parser with Mark3Labs library (AC-3)"
    - "Unit test schema validation for tool inputs (AC-3)"
    - "Unit test MCP response message formatter (AC-4)"
    - "Unit test MCP validation against schema (AC-4)"
    - "Unit test response type builders (AC-4)"
    - "Unit test streaming response handling (AC-4)"
    - "Unit test connection manager implementation (AC-5)"
    - "Unit test graceful connection termination (AC-5)"
    - "Unit test connection timeout handling (AC-5)"
    - "Unit test connection backpressure mechanism (AC-6)"
    - "Unit test concurrent queue processing (AC-6)"
    - "Integration test WebSocket connection establishment (AC-1)"
    - "Integration test WebSocket message exchange (AC-1)"
    - "Integration test HTTP endpoint accessibility (AC-2)"
    - "Integration test HTTP to WebSocket upgrade (AC-2)"
    - "Integration test message parsing and validation flow (AC-3)"
    - "Integration test response formatting and delivery (AC-4)"
    - "Integration test connection lifecycle management (AC-5)"
    - "Integration test connection pool under load (AC-6)"
    - "Integration test concurrent client connections (AC-6)"
    - "E2E test complete MCP communication flow (AC-1, AC-2, AC-3, AC-4)"
    - "E2E test authentication and session handling (AC-1, AC-2)"
    - "E2E test error recovery and reconnection (AC-5)"
    - "E2E test high concurrency scenarios (AC-6)"
    - "Performance test: message processing latency < 2000ms (AC-3, AC-4)"
    - "Performance test: support 10+ concurrent connections (AC-6)"
    - "Performance test: handle 60 requests/minute per connection (AC-6)"
    - "Load test concurrent message processing (AC-6)"
  coverage:
    business_logic: "90%"
    connection_manager: "90%"
    e2e: "80%"
    http_handlers: "85%"
    integration: "80%"
    message_processors: "90%"
    overall: "85%"

scenarios:
  test_scenarios:
    - id: "3.1-INT-001"
      acceptance_criteria: ["AC-1", "AC-5"]
      steps:
        - given:
            - "Server accepts WebSocket connections on port 8081"
        - when:
            - "Client sends WebSocket connection request"
        - then:
            - "Server establishes WebSocket connection"
            - and: "Server returns connection ID"

      level: "integration"
      priority: "P0"
    - id: "3.1-INT-002"
      acceptance_criteria: ["AC-2"]
      steps:
        - given:
            - "Server runs HTTP endpoint on port 8081/mcp"
        - when:
            - "Client sends HTTP GET request to /mcp"
        - then:
            - "Server returns status 200"
            - and: "Response contains MCP protocol version"

      level: "integration"
      priority: "P0"
    - id: "3.1-INT-003"
      acceptance_criteria: ["AC-3"]
      steps:
        - given:
            - "Client maintains WebSocket connection"
        - when:
            - "Client sends message with <format>"
        - then:
            - "Server returns response with <status>"
            - and: "Response contains <details>"
      scenario_outline: true
      examples:
        - details: message accepted
          format: valid MCP format
          status: success

        - details: invalid message format
          format: invalid JSON
          status: error

        - details: "missing fields: type, content"
          format: missing required fields
          status: error

      level: "integration"
      priority: "P0"
    - id: "3.1-INT-004"
      acceptance_criteria: ["AC-4"]
      steps:
        - given:
            - "Client maintains WebSocket connection"
        - when:
            - "Client sends valid MCP request"
        - then:
            - "Server returns response following MCP format"
            - and: "Response includes correlation ID"
            - and: "Response contains required MCP fields"

      level: "integration"
      priority: "P0"
    - id: "3.1-INT-005"
      acceptance_criteria: ["AC-5"]
      steps:
        - given:
            - "Client maintains WebSocket connection"
        - when:
            - "Client closes connection"
        - then:
            - "Server releases connection resources"
            - and: "Server removes client from active connections"

      level: "integration"
      priority: "P1"
    - id: "3.1-INT-006"
      acceptance_criteria: ["AC-6"]
      steps:
        - given:
            - "Server accepts 100 concurrent connections"
        - when:
            - "101st client attempts connection"
        - then:
            - "Server rejects connection attempt"
            - and: "Server sends connection limit exceeded message"

      level: "integration"
      priority: "P0"
    - id: "3.1-E2E-001"
      acceptance_criteria: ["AC-1", "AC-2", "AC-3", "AC-4"]
      steps:
        - given:
            - "MCP server accepts connections"
        - when:
            - "Claude sends WebSocket connection request"
            - and: "Claude sends MCP-formatted message"
        - then:
            - "Server establishes connection"
            - and: "Server processes message successfully"
            - and: "Server returns MCP-compliant response"

      level: "e2e"
      priority: "P0"
    - id: "3.1-E2E-002"
      acceptance_criteria: ["AC-5", "AC-6"]
      steps:
        - given:
            - "Multiple Claude instances connect to server"
            - and: "Each instance maintains active connection"
        - when:
            - "All instances send messages simultaneously"
        - then:
            - "Server processes all messages concurrently"
            - and: "Server maintains message order per connection"

      level: "e2e"
      priority: "P1"

change_log:
  - date: "2025-10-08"
    version: "1.0.0"
    description: "Initial story creation"
    author: "bmad-cli"

qa_results:
  review_date: "2025-10-08"
  reviewed_by: "Quinn (Test Architect)"

  assessment:
    summary: "Story demonstrates high readiness with well-structured implementation plan. Acceptance criteria, tasks, and technical requirements are thoroughly documented. Testing coverage is comprehensive with unit, integration, and E2E tests planned for each component."

    strengths:
      - "Clear task breakdown with testing requirements for each component"
      - "Comprehensive development notes with architecture and performance specs"
      - "Strong focus on error handling and validation at each layer"
      - "Performance requirements clearly defined with measurable metrics"
      - "Well-defined technical dependencies and integration points"

    improvements:
      - "Add specific error handling scenarios to acceptance criteria"
      - "Include security testing requirements in E2E test scenarios"
      - "Define rollback procedures for failed deployments"
      - "Specify monitoring and alerting requirements"

    risk_level: "Medium"
    risk_reason: "Complex concurrent connection management and integration with external services (OAuth, Google Docs) present moderate technical risks. However, thorough test coverage and clear architecture mitigate these risks."
    testability_score: 9
    testability_max: 10
    testability_notes: "Excellent testability with comprehensive test coverage planned at unit, integration and E2E levels. Clear performance metrics enable quantitative validation. Only minor gap in security testing specification."
    implementation_readiness: 9
    implementation_readiness_max: 10

  gate_status: "PASS"
  gate_reference: "docs/qa/gates/3.1-mcp-server-implementation.yml"

dev_agent_record:
  agent_model_used: null
  debug_log_references: []
  completion_notes: []
  file_list: []
