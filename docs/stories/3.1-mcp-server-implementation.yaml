story:
  id: "3.1"
  title: "MCP Server Implementation"
  as_a: "Developer/Maintainer"
  i_want: "to implement MCP protocol server"
  so_that: "Claude can communicate with the service"
  status: "PLANNED"
  acceptance_criteria:
    - id: AC-1
      description: "WebSocket server implemented"
    - id: AC-2
      description: "HTTP endpoint for MCP available"
    - id: AC-3
      description: "Message parsing and validation"
    - id: AC-4
      description: "Response formatting to MCP standard"
    - id: AC-5
      description: "Connection management handled"
    - id: AC-6
      description: "Concurrent connection support"

tasks:
  - name: "WebSocket Server Setup"
    acceptance_criteria:
      - "AC-1"
    subtasks:
      - "Initialize Go module structure according to source-tree.md layout"
      - "Implement WebSocket server using gorilla/websocket with base handlers"
      - "Add connection lifecycle management (open/close/ping)"
      - "Implement error handling and logging middleware"
      - "Write integration tests for WebSocket connectivity"
    status: "pending"

  - name: "HTTP Endpoint Implementation"
    acceptance_criteria:
      - "AC-2"
    subtasks:
      - "Create Fiber HTTP server and router setup"
      - "Implement health check endpoint for monitoring"
      - "Add MCP protocol version endpoint"
      - "Configure CORS and security middleware"
      - "Write integration tests for HTTP endpoints"
    status: "pending"

  - name: "Message Parsing & Validation"
    acceptance_criteria:
      - "AC-3"
    subtasks:
      - "Create MCP message type definitions and validators"
      - "Implement JSON message parsing and validation"
      - "Add request/response schema validation"
      - "Set up structured error responses"
      - "Write unit tests for message validation"
    status: "pending"

  - name: "Response Formatting"
    acceptance_criteria:
      - "AC-4"
    subtasks:
      - "Create standardized MCP response formatter"
      - "Implement success/error message templates"
      - "Add response headers and metadata handling"
      - "Set up logging for response tracking"
      - "Write unit tests for response formatting"
    status: "pending"

  - name: "Connection Management"
    acceptance_criteria:
      - "AC-5"
    subtasks:
      - "Implement connection lifecycle tracking"
      - "Add connection pool management"
      - "Set up connection timeouts and cleanup"
      - "Implement reconnection handling"
      - "Write integration tests for connection management"
    status: "pending"

  - name: "Concurrent Connection Support"
    acceptance_criteria:
      - "AC-6"
    subtasks:
      - "Implement goroutine-based connection handling"
      - "Add connection limit configuration"
      - "Set up concurrent message processing"
      - "Implement connection load balancing"
      - "Write performance tests for concurrent connections"
    status: "pending"

dev_notes:
  architecture:
      component: MCP Protocol Handler
      dependencies:
          - Command Processor for operation execution
          - OAuth Manager for authentication
          - Document Service for Google Docs operations
      description: 'From the MCP protocol workflow diagram:'
      responsibilities:
          - Handle WebSocket communication with Claude AI
          - Tool registration and discovery
          - Request/response message handling
          - Connection lifecycle management
      source: ./docs/architecture.md#Components
      tech_stack:
          - Go stdlib net/http
          - gorilla/websocket
          - Mark3Labs MCP-Go
          - zerolog
  configuration:
      description: 'Required environment variables for the service:'
      environment_variables:
          ENVIRONMENT: development
          LOG_FORMAT: json
          LOG_LEVEL: info
          MCP_PORT: "8081"
          PORT: "8080"
          REDIS_TTL_HOURS: "24"
          REDIS_URL: redis://localhost:6379
      source: ./docs/architecture/coding-standards.md#Environment Variables
  file_structure:
      description: 'From the project file structure documentation:'
      files:
          - description: MCP server entry point
            file: services/mcp-service/cmd/main.go
          - description: Mark3Labs MCP server setup and configuration
            file: services/mcp-service/internal/server/mcp.go
          - description: Tool registration with schema validation
            file: services/mcp-service/internal/server/tools.go
          - description: Strongly-typed tool handlers
            file: services/mcp-service/internal/server/handlers.go
          - description: Recovery and capability middleware
            file: services/mcp-service/internal/server/middleware.go
      source: ./docs/architecture/source-tree.md#services/mcp-service
  performance_requirements:
      concurrent_connections: 10+
      connection_establishment: < 100ms
      description: 'Performance requirements based on coding standards:'
      memory_usage: < 128MB
      message_processing: < 2s
      source: ./docs/architecture/coding-standards.md#Performance Standards
  previous_story_insights:
      description: 'From the architecture document:'
      insights:
          - Initial implementation of MCP protocol server focusing on core WebSocket and HTTP capabilities
          - Primary goal is establishing reliable communication between Claude and the service
          - Implementation follows iterative approach, starting with core connectivity before advanced features
      source: ./docs/architecture.md#Change Log
  technology_stack:
      config: viper for environment/config management
      description: 'From the backend technology stack documentation:'
      framework: Fiber 2.x
      language: Go 1.21
      logging: zerolog for structured JSON logging
      mcp_integration: Mark3Labs MCP-Go library for protocol implementation
      source: ./docs/architecture/tech-stack.md#Backend Stack (Go)


testing:
  test_location: "services/mcp-service/internal"
  frameworks:
    - "testify"
    - "Playwright Request API"
    - "Playwright Browser API"
    - "gomock"
    - "zerolog"
    - "miniredis"
  requirements:
    - "Unit test WebSocket server initialization and configuration (AC-1)"
    - "Unit test connection lifecycle methods - open/close/ping (AC-1)"
    - "Unit test WebSocket error handling middleware (AC-1)"
    - "Unit test parallel connection management (AC-6)"
    - "Unit test MCP version endpoint handler (AC-2)"
    - "Unit test health check endpoint (AC-2)"
    - "Unit test HTTP middleware chain setup (AC-2)"
    - "Unit test CORS configuration (AC-2)"
    - "Unit test MCP message type validation (AC-3)"
    - "Unit test JSON schema validation (AC-3)"
    - "Unit test MCP response formatting (AC-4)"
    - "Unit test error response templates (AC-4)"
    - "Unit test connection pool management (AC-5)"
    - "Unit test connection cleanup timeouts (AC-5)"
    - "Unit test concurrent message processing (AC-6)"
    - "Unit test connection limit enforcement (AC-6)"
    - "Integration test (IT_0031_01): MCP WebSocket connection establishment and handshake (AC-1)"
    - "Integration test (IT_0031_02): HTTP MCP version endpoint returns correct response (AC-2)"
    - "Integration test (IT_0031_03): WebSocket message validation with invalid inputs (AC-3)"
    - "Integration test (IT_0031_04): MCP response format compliance (AC-4)"
    - "Integration test (IT_0031_05): Connection lifecycle management through full session (AC-5)"
    - "Integration test (IT_0031_06): Multiple concurrent client connections (AC-6)"
    - "E2E test (EE_0031_01): Claude establishes WebSocket connection and receives tool registration (AC-1, AC-2)"
    - "E2E test (EE_0031_02): Claude sends invalid message and receives validation error (AC-3, AC-4)"
    - "E2E test (EE_0031_03): Connection cleanup on client disconnect (AC-5)"
    - "E2E test (EE_0031_04): Multiple Claude instances operate concurrently (AC-6)"
    - "Load test: Measure concurrent connection handling up to 10+ connections (AC-6)"
    - "Performance test: Connection establishment under 100ms (AC-1)"
    - "Performance test: Message processing under 2s per operation (AC-3)"
    - "Performance test: Memory usage under 128MB under load (AC-6)"
    - "Security test: WebSocket server validates secure connection options (AC-1)"
    - "Security test: HTTP endpoints enforce CORS policy (AC-2)"
    - "Security test: Message schema prevents injection attacks (AC-3)"
    - "Security test: Connection pool prevents resource exhaustion (AC-5)"
  coverage:
    business_logic: "85%"
    connection_mgmt: "85%"
    http_handlers: "85%"
    message_processing: "85%"
    overall: "80%"
    websocket: "90%"

scenarios:
  test_scenarios:
    - id: "3.1-INT-001"
      acceptance_criteria: ["AC-1"]
      steps:
        - given: "Server is ready to accept WebSocket connections"
        - when: "Client attempts to establish WebSocket connection"
        - then: "Server accepts connection and sends handshake response"
      level: "integration"
      priority: "P0"
    - id: "3.1-INT-002"
      acceptance_criteria: ["AC-2"]
      steps:
        - given: "Server has MCP endpoint enabled"
        - when: "Client sends HTTP request to MCP version endpoint"
        - then: "Server returns 200 status and protocol version"
      level: "integration"
      priority: "P0"
    - id: "3.1-INT-003"
      acceptance_criteria: ["AC-3"]
      steps:
        - given: "Client has active WebSocket connection"
        - when: "Client sends message with <format> content"
        - then: "Server responds with <status> validation message"
      scenario_outline: true
      examples:
        - format: invalid JSON
          status: error

        - format: valid JSON but invalid MCP schema
          status: error

        - format: valid MCP message
          status: success

      level: "integration"
      priority: "P1"
    - id: "3.1-INT-004"
      acceptance_criteria: ["AC-4"]
      steps:
        - given: "Client has active WebSocket connection"
        - when: "Client sends valid MCP request"
        - then: "Server responds with correctly formatted MCP message"
      level: "integration"
      priority: "P1"
    - id: "3.1-INT-005"
      acceptance_criteria: ["AC-5"]
      steps:
        - given: "Client has active WebSocket connection"
        - when: "Client disconnects unexpectedly"
        - then: "Server detects disconnect and cleans up connection resources"
      level: "integration"
      priority: "P0"
    - id: "3.1-INT-006"
      acceptance_criteria: ["AC-6"]
      steps:
        - given: "Server is running with connection limit of 10"
        - when: "Multiple clients attempt connections simultaneously"
        - then: "Server handles all connections up to configured limit"
      level: "integration"
      priority: "P1"
    - id: "3.1-E2E-001"
      acceptance_criteria: ["AC-1", "AC-2"]
      steps:
        - given: "Claude client is ready to connect"
        - when: "Claude attempts to establish connection to MCP server"
        - then: "Connection succeeds and Claude receives tool registration confirmation"
      level: "e2e"
      priority: "P0"
    - id: "3.1-E2E-002"
      acceptance_criteria: ["AC-3", "AC-4"]
      steps:
        - given: "Claude has active connection to MCP server"
        - when: "Claude sends invalid MCP tool invocation request"
        - then: "Claude receives properly formatted error response"
      level: "e2e"
      priority: "P1"
    - id: "3.1-E2E-003"
      acceptance_criteria: ["AC-5", "AC-6"]
      steps:
        - given: "Multiple Claude instances are running"
        - when: "Each Claude instance connects to MCP server"
        - then: "All Claude instances maintain stable connections"
      level: "e2e"
      priority: "P1"

change_log:
  - date: "2025-10-07"
    version: "1.0.0"
    description: "Initial story creation"
    author: "bmad-cli"

qa_results:
  review_date: "2025-10-07"
  reviewed_by: "Quinn (Test Architect)"

  assessment:
    summary: "Well-structured MCP server implementation story with clear acceptance criteria, detailed tasks, and comprehensive development notes. Technical requirements and architecture details are thoroughly documented. Implementation approach follows best practices with proper separation of concerns."

    strengths:
      - "Detailed acceptance criteria covering all core MCP server functionality"
      - "Comprehensive task breakdown with clear subtasks for each component"
      - "Strong technical documentation including architecture, config, and performance requirements"
      - "Clear file structure and component responsibilities defined"
      - "Explicit performance requirements and metrics specified"

    improvements:
      - "Add specific error scenarios to test in acceptance criteria"
      - "Include security testing requirements for WebSocket/HTTP endpoints"
      - "Define rollback/recovery procedures for connection failures"
      - "Specify monitoring/observability requirements"

    risk_level: "Medium"
    risk_reason: "Complex concurrent connection handling and potential performance bottlenecks under load. Critical component for system reliability."
    testability_score: 8
    testability_max: 10
    testability_notes: "Story has good testability with clear acceptance criteria and performance metrics. Integration and unit test tasks are well-defined. Additional error scenarios would improve test coverage."
    implementation_readiness: 9
    implementation_readiness_max: 10

  gate_status: "PASS"
  gate_reference: "docs/qa/gates/3.1-mcp-server-implementation.yml"

dev_agent_record:
  agent_model_used: null
  debug_log_references: []
  completion_notes: []
  file_list: []
