story:
  id: "3.1"
  title: "MCP Server Implementation"
  as_a: "Developer/Maintainer"
  i_want: "to implement MCP protocol server"
  so_that: "Claude can communicate with the service"
  status: "PLANNED"
  acceptance_criteria:
    - id: AC-1
      description: "WebSocket server implemented"
    - id: AC-2
      description: "HTTP endpoint for MCP available"
    - id: AC-3
      description: "Message parsing and validation"
    - id: AC-4
      description: "Response formatting to MCP standard"
    - id: AC-5
      description: "Connection management handled"
    - id: AC-6
      description: "Concurrent connection support"

tasks:
  - name: "Implement WebSocket server for MCP protocol"
    acceptance_criteria:
      - "AC-1"
    subtasks:
      - "Set up Go project structure for MCP service following source tree standards"
      - "Add Fiber framework with WebSocket endpoint /mcp"
      - "Implement basic WebSocket connection handling with gorilla/websocket"
      - "Add connection lifecycle management (connect, disconnect, cleanup)"
      - "Write unit tests for WebSocket server implementation"
      - "Add integration tests for WebSocket connectivity"
    status: "pending"

  - name: "Expose HTTP endpoint for MCP discovery"
    acceptance_criteria:
      - "AC-2"
    subtasks:
      - "Implement /health endpoint for MCP server monitoring"
      - "Add /version endpoint for protocol version discovery"
      - "Implement request logging and error handling middleware"
      - "Set up structured logging with zerolog"
      - "Write integration tests for HTTP endpoints"
    status: "pending"

  - name: "Implement message parsing and validation"
    acceptance_criteria:
      - "AC-3"
    subtasks:
      - "Define message schemas for MCP protocol using structs"
      - "Implement JSON parsing for incoming messages"
      - "Add message validation using struct tags"
      - "Set up error types for validation failures"
      - "Write unit tests for message parsing"
      - "Add integration tests for invalid message handling"
    status: "pending"

  - name: "Set up MCP response formatting"
    acceptance_criteria:
      - "AC-4"
    subtasks:
      - "Define response message structures per MCP spec"
      - "Implement response serialization to JSON"
      - "Add response validation before sending"
      - "Set up error response formatting"
      - "Write unit tests for response formatting"
    status: "pending"

  - name: "Implement connection management"
    acceptance_criteria:
      - "AC-5"
    subtasks:
      - "Set up connection tracking with unique IDs"
      - "Implement connection timeouts and keepalive"
      - "Add graceful shutdown handling"
      - "Implement connection state management"
      - "Write tests for connection lifecycle"
      - "Add metrics for connection tracking"
    status: "pending"

  - name: "Add concurrent connection support"
    acceptance_criteria:
      - "AC-6"
    subtasks:
      - "Implement goroutine per connection pattern"
      - "Set up connection pooling"
      - "Add resource limits for concurrent connections"
      - "Implement rate limiting per connection"
      - "Set up connection metrics monitoring"
      - "Write load tests for concurrent connections"
    status: "pending"

dev_notes:
  architecture:
      components:
          - name: MCP Protocol Handler
            responsibilities:
              - WebSocket endpoint for bidirectional communication
              - Tool registration and discovery
              - Request/response message handling
              - Connection lifecycle management
              - Concurrent connection support
            tech_stack:
              - Go stdlib net/http
              - gorilla/websocket
          - name: REST API Gateway
            responsibilities:
              - HTTP endpoint for MCP discovery
              - Health check endpoints
              - Version information endpoint
            tech_stack:
              - Fiber framework
              - JWT validation
          - name: Monitoring
            responsibilities:
              - Connection metrics tracking
              - Message success/failure rates
              - Resource utilization monitoring
            tech_stack:
              - Structured logging with zerolog
              - Railway monitoring integration
      description: 'From the MCP protocol workflow diagram:'
      source: ./docs/architecture.md#Components
  configuration:
      description: 'Required environment variables for the MCP service:'
      environment_variables:
          ENVIRONMENT: development
          IDLE_TIMEOUT: 300s
          LOG_FORMAT: json
          LOG_LEVEL: info
          MAX_CONNECTIONS: "100"
          MAX_MESSAGE_SIZE: "1048576"
          MCP_HOST: 0.0.0.0
          MCP_PORT: "8081"
          PING_INTERVAL: 30s
          READ_BUFFER_SIZE: "4096"
          WRITE_BUFFER_SIZE: "4096"
          WRITE_TIMEOUT: 10s
      source: ./docs/architecture/coding-standards.md#Configuration and Environment
  file_structure:
      description: 'Based on the source tree structure and services layout:'
      files:
          - description: MCP WebSocket server entry point
            file: /services/backend/cmd/mcp/main.go
          - description: MCP protocol handler implementation
            file: /services/backend/internal/server/mcp.go
          - description: Tool registration and schemas
            file: /services/backend/internal/server/tools.go
          - description: Message handlers
            file: /services/backend/internal/server/handlers.go
          - description: Connection and auth middleware
            file: /services/backend/internal/server/middleware.go
          - description: Health check endpoints
            file: /services/backend/internal/server/health.go
      source: ./docs/architecture/source-tree.md#services/backend
  performance_requirements:
      connection_handling:
          concurrent_connections: 10+
          connection_establishment: < 1s
          message_processing: < 2s
          websocket_ping: < 50ms
      description: 'Performance requirements and targets:'
      monitoring_thresholds:
          connection_errors: < 1%
          message_failures: < 0.1%
      resource_limits:
          max_message_size: 1MB
          memory_usage: < 128MB
          read_buffer: 4KB
          write_buffer: 4KB
      source: ./docs/architecture/coding-standards.md#Performance Standards
  previous_story_insights:
      description: 'From the architecture document:'
      insights: |
          - MCP protocol implementation is a core feature using Go services with WebSocket support
          - No starter template needed per architecture doc section "Starter Template or Existing Project"
          - Service must be containerized and deployed to Railway environments
          - Strong emphasis on structured logging and error handling
      source: ./docs/architecture.md#Introduction
  technology_stack:
      dependencies:
          - name: zerolog
            purpose: Structured JSON logging
            version: 1.x
          - name: viper
            purpose: Environment/config management
            version: 1.x
      description: 'From the backend technology stack documentation:'
      frameworks:
          - name: Fiber
            purpose: HTTP routing and WebSocket support
            version: 2.x
          - name: Mark3Labs MCP-Go
            purpose: MCP protocol implementation
            version: latest
      language: Go 1.21
      source: ./docs/architecture/tech-stack.md#Backend Stack (Go)
      testing:
          framework: testify
          types:
              - Unit
              - Integration
              - E2E
          version: latest


testing:
  test_location: "services/backend/internal/server/tests"
  frameworks:
    - "testify"
    - "httptest"
    - "Mark3Labs MCP-Go test utils"
    - "zerolog/test"
    - "Playwright Request API"
    - "Playwright Browser API"
  requirements:
    - "Unit test: WebSocket server initialization (AC-1)"
    - "Unit test: WebSocket connection handling functions (AC-1)"
    - "Unit test: Connection lifecycle management (AC-1, AC-5)"
    - "Unit test: Message parsing and schema validation (AC-3)"
    - "Unit test: Response message formatting (AC-4)"
    - "Unit test: Connection tracking system (AC-5)"
    - "Unit test: Resource limits enforcement (AC-6)"
    - "Integration test: WebSocket endpoint connectivity (scenario 3.1-INT-001) (AC-1)"
    - "Integration test: HTTP discovery endpoints (scenario 3.1-INT-002) (AC-2)"
    - "Integration test: MCP message exchange flow (scenario 3.1-INT-003) (AC-3, AC-4)"
    - "Integration test: Connection lifecycle events (scenario 3.1-INT-004) (AC-5)"
    - "Integration test: Multi-connection management (scenario 3.1-INT-005) (AC-5, AC-6)"
    - "E2E test: Complete MCP connection and message flow (scenario 3.1-E2E-001) (AC-1, AC-2, AC-3, AC-4)"
    - "E2E test: Connection management and recovery (scenario 3.1-E2E-002) (AC-5)"
    - "Load test: Concurrent connections benchmark (100 connections) (AC-6)"
    - "Load test: Message throughput (1000 msg/sec) (AC-3, AC-4)"
    - "Performance test: Connection establishment (<1s) (AC-1)"
    - "Performance test: Message processing latency (<2s) (AC-3, AC-4)"
    - "Performance test: WebSocket ping/pong (<50ms) (AC-5)"
    - "Security test: Message size limits enforcement (AC-3)"
    - "Security test: Rate limiting verification (AC-6)"
  coverage:
    business_logic: "90%"
    connection_management: "90%"
    handlers: "90%"
    integration: "80%"
    message_processing: "90%"
    middleware: "85%"
    overall: "85%"
    websocket: "90%"

scenarios:
  test_scenarios:
    - id: "3.1-INT-001"
      acceptance_criteria: ["AC-1"]
      steps:
        - given: "Server is ready to accept WebSocket connections"
        - when: "Client attempts to connect to WebSocket endpoint /mcp"
        - then: "Server accepts WebSocket connection"
        - and: "Server responds with connection successful message"
      level: "integration"
      priority: "P0"
    - id: "3.1-INT-002"
      acceptance_criteria: ["AC-2"]
      steps:
        - given: "Server is running and accepting HTTP requests"
        - when: "Client sends <method> request to <endpoint>"
        - then: "Server returns status code <status>"
        - and: "Response includes <content> in JSON format"
      scenario_outline: true
      examples:
        - content: health status
          endpoint: /health
          method: GET
          status: 200

        - content: protocol version
          endpoint: /version
          method: GET
          status: 200

      level: "integration"
      priority: "P0"
    - id: "3.1-INT-003"
      acceptance_criteria: ["AC-3", "AC-4"]
      steps:
        - given: "Client has active WebSocket connection"
        - when: "Client sends malformed JSON message"
        - then: "Server returns validation error response"
        - and: "Error message follows MCP format specification"
      level: "integration"
      priority: "P0"
    - id: "3.1-INT-004"
      acceptance_criteria: ["AC-5"]
      steps:
        - given: "Client has active WebSocket connection"
        - when: "Client remains inactive for timeout period"
        - then: "Server terminates connection"
        - and: "Server sends timeout notification message"
      level: "integration"
      priority: "P1"
    - id: "3.1-INT-005"
      acceptance_criteria: ["AC-6"]
      steps:
        - given: "Server is configured with connection limit of 100"
        - when: "Multiple clients attempt concurrent connections"
        - then: "Server accepts connections up to configured limit"
        - and: "Additional connection attempts receive limit exceeded error"
      level: "integration"
      priority: "P1"
    - id: "3.1-E2E-001"
      acceptance_criteria: ["AC-1", "AC-2", "AC-3", "AC-4"]
      steps:
        - given: "MCP server is running with all endpoints enabled"
        - when: "Claude attempts to establish MCP connection"
        - then: "Claude successfully connects via WebSocket"
        - and: "Claude exchanges valid protocol messages with server"
        - and: "Server responds with correctly formatted messages"
      level: "e2e"
      priority: "P0"
    - id: "3.1-E2E-002"
      acceptance_criteria: ["AC-5", "AC-6"]
      steps:
        - given: "Claude has active MCP connection to server"
        - when: "Network interruption occurs"
        - then: "Server detects connection loss"
        - and: "Server frees connection resources"
        - and: "Claude can establish new connection after recovery"
      level: "e2e"
      priority: "P1"

change_log:
  - date: "2025-10-07"
    version: "1.0.0"
    description: "Initial story creation"
    author: "bmad-cli"

qa_results:
  review_date: "2025-10-07"
  reviewed_by: "Quinn (Test Architect)"

  assessment:
    summary: "Well-structured MCP server implementation story with comprehensive technical details, clear acceptance criteria, and detailed tasks. Architecture and performance requirements are well documented. Some improvements needed in testing coverage and error handling specifications."

    strengths:
      - "Detailed task breakdown with clear mapping to acceptance criteria"
      - "Comprehensive technical architecture with clear component responsibilities"
      - "Explicit performance requirements and monitoring thresholds"
      - "Well-defined environment variables and configuration needs"
      - "Structured file organization following backend standards"

    improvements:
      - "Add explicit error handling scenarios to acceptance criteria"
      - "Include security testing requirements for WebSocket endpoints"
      - "Define specific test coverage thresholds for components"
      - "Add rollback/recovery scenarios for connection failures"
      - "Specify monitoring alert thresholds for operational metrics"

    risk_level: "Medium"
    risk_reason: "Complex concurrent connections handling and potential security implications of WebSocket endpoints require careful implementation and thorough testing"
    testability_score: 8
    testability_max: 10
    testability_notes: "Strong testability with clear components and interfaces. Missing some edge case scenarios and security test specifications."
    implementation_readiness: 9
    implementation_readiness_max: 10

  gate_status: "PASS"
  gate_reference: "docs/qa/gates/3.1-mcp-server-implementation.yml"

dev_agent_record:
  agent_model_used: null
  debug_log_references: []
  completion_notes: []
  file_list: []
